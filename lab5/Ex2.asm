
CSEG AT 0000H
JMP MAIN

CSEG AT 0023H ; ADDRESS OF SERIAL INTERUPT
JMP SERIAL ; WE JMP TO OTHER LOCATION BECUASE OF SHORT MEMORY

CSEG AT 0003H ; ADDRESS OF TIMER 0 INTERUPT
JMP EX_INT0 ; WE JMP TO OTHER LOCATION BECUASE OF SHORT MEMORY

CSEG AT 0100H ; MAIN

MAIN:
	CLR SM0  ;TURN OFF BIT 7 IN SCON
	SETB SM1 ;TURN ON BIT 6 IN SCON
	SETB REN ;TURN ON BIT 4 SCON
	ANL PCON , #07FH ; SMOD=0 FOR BAUD RATE CALCULATION
	ANL TMOD , #02FH ; TURNNING OFF BIT 4 TO SET TIMER1 TO AUTO RELOAD MODE
	ORL TMOD , #020H ;  TURNNING ON BIT 5 TO SET TIMER1 TO AUTO RELOAD MODE
	MOV TH1 , #112D ; OVERFLOW EVERY 144 CYCLE 256-112=144 --> 76800 [OVERFLOWS/SEC]
				    ; 76800*2^0/32 = BAUD RATE OF 2400[BITS/SEC]
	SETB TR1 ; TURN TIMER 1 ON
	CLR IT0 ; Make the interrupt LEVEL triggered.
	;-----SET INTERUPTS-----
	CLR ET1 ; CLEAR INTERUPT FOR TIMER1
	SETB ES ; ENABLE SERIAL PORT INTERUPT
	SETB EX0 ; Enable EXT INTERUPT 0.
	SETB EA ; GLOBAL INTERRUPT ENABLE
	JMP $ ; inf loop

SERIAL:
	CLR TI ; CLEAR THE TRANSMIT FLAG OF THE UART
	JBC RI,RI_ON ;TURN OFF RI AND JMP TO SEND IT BACK
	;TRANSMINT INTERUPT
	PUSH ACC ;SAVE THE ACCUMLATOR
	CLR A
	MOVC A , @A+DPTR ; DPTR HOLD THE ADDRESS TO THE LABEL THAT REPRESNT THE LETTER THAT SUPPOSED TO BE PRINT
	JZ IN_NULL ; DO NOT PRINT OF THE LETTER THAT A HOLDS IS NULL
	MOV SBUF , A ; SEND A TO SBUF WILL PRINT IT
	INC DPTR ; FOR READING THE NEXT LETTER IN THE STRING
	JMP END_SER
IN_NULL: ;JUMP TO THIS POINT WHEN WEPINISH THE STRING
	SETB EX0 ; Enable EXT INTERUPT 0.
END_SER:
	POP ACC
RETI

EX_INT0: ; interrupt 0 function
	CLR EX0 ;close interrupts
		MOV DPTR , #INT0_PRESSED ;move to tptr the addres of ths string to print
		SETB TI ; create an interrupt that will cause the print
RETI

RI_ON:
		CLR RI ;CLEAR THE RECIVE FLAG OF THE UART
		MOV R2 , SBUF ; REGISTER R2 WILL GET THE LETTER THAT ENTERED THE SBUF FROM THE
		CJNE R2 , #'a' ,CHECK_B ;check if r2 hold a, if not jump to check_b
		MOV DPTR , #A_PRESSED ;if it is 'a' in r2 enter dptr the address of 'a' to print
		JMP END_RI
	CHECK_B:
		CJNE R2 , #'b' , CHECK_C
		MOV DPTR , #B_PRESSED
		JMP END_RI
	CHECK_C:
		CJNE R2 , #'c' , CHECK_D
		MOV DPTR , #C_PRESSED
		JMP END_RI
	CHECK_D:
		CJNE R2 , #'d' , END_RI
		MOV DPTR , #D_PRESSED
	END_RI:
		SETB TI
RETI

CSEG AT 0200H ; this strings address will enter to the dptr
A_PRESSED: DB 'a PRESSED'
		   DB 13 ; CARRIAGE RETURN
		   DB 10 ; NEW LINE
		   DB 0 ; NULL

B_PRESSED: DB 'b PRESSED'
		   DB 13 ; CARRIAGE RETURN
		   DB 10 ; NEW LINE
		   DB 0 ; NULL

C_PRESSED: DB 'c PRESSED'
		   DB 13 ; CARRIAGE RETURN
		   DB 10 ; NEW LINE
		   DB 0 ; NULL

D_PRESSED: DB 'd PRESSED'
		   DB 13 ; CARRIAGE RETURN
		   DB 10 ; NEW LINE
		   DB 0 ; NULL
INT0_PRESSED: DB 'This button should not be pressed!'
			  DB 13 ; CARRIAGE RETURN
		      DB 10 ; NEW LINE
		      DB 0 ; NULL

END
